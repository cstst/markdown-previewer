{"version":3,"sources":["components/Frame.js","actions/index.js","actions/types.js","components/Editor.js","components/Previewer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Frame","handleClick","e","_this","props","resize","name","_this$props","this","children","_frames$name","frames","visible","expanded","sizeClass","capitalizedName","charAt","toUpperCase","slice","react_default","a","createElement","className","concat","onClick","index_es","icon","faWindowMinimize","faWindowMaximize","Component","connect","state","frame","type","payload","Editor","input","handleChange","target","value","setState","components_Frame","id","onChange","output","marked","dangerouslySetInnerHTML","__html","initialState","editor","previewer","createStore","_frames","arguments","length","undefined","action","Object","objectSpread","otherFrame","frameExpanded","defineProperty","App","es","store","components_Editor","components_Previewer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b6c78f2.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { resize } from '../actions';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faWindowMaximize, faWindowMinimize } from '@fortawesome/free-solid-svg-icons'\r\n\r\nclass Frame extends Component {\r\n\r\n  handleClick = e => {\r\n    this.props.resize(this.props.name);\r\n  }\r\n\r\n  render() {\r\n    const { name, children, frames } = this.props,\r\n          { visible, expanded } = frames[name],\r\n          sizeClass = expanded ? 'expanded' : visible ? 'visible' : 'hidden',\r\n          capitalizedName = name.charAt(0).toUpperCase() + name.slice(1);\r\n    return (\r\n      <div className={`frame ${name} ${sizeClass}`}>\r\n        <div className=\"header\">\r\n          <h4>{capitalizedName}</h4>\r\n          <button \r\n            onClick={this.handleClick}\r\n          ><FontAwesomeIcon icon={expanded ? faWindowMinimize : faWindowMaximize}/></button>\r\n        </div>\r\n        <div className=\"body\">\r\n          {children}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({ frames: state.frames });\r\n\r\nexport default connect(mapStateToProps, { resize })(Frame)","import { INPUT, RESIZE } from './types';\r\n\r\nexport const input = value => {\r\n  return {\r\n    type: INPUT,\r\n    payload: value\r\n  }\r\n}\r\n\r\nexport const resize = frame => {\r\n  return {\r\n    type: RESIZE,\r\n    payload: frame\r\n  }\r\n}","export const INPUT = 'INPUT';\r\nexport const RESIZE = 'RESIZE';","import React, { Component } from 'react';\r\nimport Frame from './Frame';\r\nimport { connect } from 'react-redux';\r\nimport { input } from '../actions';\r\n\r\nclass Editor extends Component {\r\n\r\n  state = {\r\n    input: `# This is an h1 heading\r\n## This is an h2 heading\r\n**This is bold text**\r\n\r\n[This is a link](http://www.google.com)\r\n\r\nThis \\`isInlineCode();\\`\r\n\r\n    function codeBlock() {\r\n      return 'This is a code block';\r\n    }\r\n\r\n1. This is a list item\r\n2. this is another list item \r\n\r\n> This is a block quote\r\n>> This one is nested\r\n\r\n![This is an image](https://www.gettingstamped.com/wp-content/uploads/2016/02/Things-to-do-in-El-Nido-Philippines-Simizu-Island-El-Nido-Tour-A-1.jpg)`\r\n  }\r\n  componentDidMount() {\r\n    this.props.input(this.state.input)\r\n  }\r\n  \r\n  handleChange = e => {\r\n    const input = e.target.value;\r\n    this.setState({input});\r\n    this.props.input(input);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Frame name=\"editor\">\r\n        <textarea id=\"editor\" value={this.state.input} onChange={this.handleChange} />\r\n      </Frame>\r\n    )\r\n  }\r\n}\r\n\r\nexport default connect(null, { input })(Editor)","import React from 'react';\r\nimport Frame from './Frame';\r\nimport { connect } from 'react-redux';\r\nimport marked from 'marked';\r\n\r\nconst Previewer = props => {\r\n  const output = marked(props.input)\r\n  return (\r\n    <Frame name=\"previewer\">\r\n      <div id=\"preview\" dangerouslySetInnerHTML={{__html: output}}></div>\r\n    </Frame>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({ input: state.input });\r\n\r\nexport default connect(mapStateToProps)(Previewer);","import { INPUT, RESIZE } from '../actions/types';\r\n\r\nconst initialState = {\r\n  input: '',\r\n  frames: {\r\n    editor: {\r\n      visible: true,\r\n      expanded: false\r\n    },\r\n    previewer: {\r\n      visible: true,\r\n      expanded: false\r\n    }\r\n  }\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n  switch(action.type) {\r\n    case INPUT:\r\n      return {\r\n        ...state,\r\n        input: action.payload\r\n      }\r\n    case RESIZE:\r\n      const frame = action.payload,\r\n            otherFrame = frame !== 'editor' ? 'editor': 'previewer',\r\n            frameExpanded = state.frames[frame].expanded;\r\n      return {\r\n        ...state,\r\n        frames: {\r\n          [frame]: {\r\n            visible: true,\r\n            expanded: frameExpanded ? false: true\r\n          },\r\n          [otherFrame]: {\r\n            visible: frameExpanded ? true : false,\r\n            expanded: false\r\n          }\r\n        }\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","\r\nimport { createStore } from 'redux';\r\nimport rootReducer from './reducers';\r\n\r\n\r\nexport default createStore(rootReducer);","import React from 'react';\r\nimport Editor from './components/Editor';\r\nimport Previewer from './components/Previewer';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\nimport './App.scss';\r\n\r\nconst App = () => (\r\n  <Provider store={store}>\r\n    <div className=\"app\">\r\n      <Editor />\r\n      <Previewer />\r\n    </div>\r\n  </Provider>\r\n);\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}